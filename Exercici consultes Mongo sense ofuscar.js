const arrMongoQueries = ['db.restaurants.find()',
	'db.restaurants.find({}, { restaurant_id:1, name:1, borough:1, cuisine:1})',
	'db.restaurants.find({}, { restaurant_id:1, name:1, borough:1, cuisine:1, _id: 0 })',
	'db.restaurants.find({}, { restaurant_id:1, name:1, borough:1, "address.zipcode":1, _id: 0 })',
	'db.restaurants.find({borough: \'Bronx\'})',
	'db.restaurants.find({borough: \'Bronx\'}).limit (5)',
	'db.restaurants.find({borough: \'Bronx\'}).skip(5).limit(5)',
	'db.restaurants.find({"grades.score" :{$gt : 90}},{name:1})',
	'db.restaurants.find({"grades.score": {$gt: 90, $lt: 100}},{ name: 1 });',
	'db.restaurants.find({"address.coord.1": {$gt: -95.754168}},{ name: 1,"address.coord":1 } )',
	'db.restaurants.find({$and: [{ cuisine: { $not: /American/ } },{ "grades.score": { $gt: 90 } },{ "address.coord.1": { $gt: -65.754168 }}]},{ name: 1, cuisine: 1 })',
	'db.restaurants.find({cuisine : {$ne:\'American \'}, "grades.score" :{$gt : 70}, "address.coord.1": {$gt: -65.754168}},{ name: 1, cuisine:1 } )',
	'db.restaurants.find({cuisine : {$not: /American/}, "grades.grade":\'A\', borough: {$not: /Brooklyn/} },{ name: 1, cuisine:1, borough:1 } )',
	'db.restaurants.find({name : {$regex: "^Wil"} },{ restaurant_id:1, name: 1, cuisine:1, borough:1 } )',
	'db.restaurants.find({name : {$regex: "ces$"} },{ restaurant_id:1, name: 1, cuisine:1, borough:1 } )',
	'db.restaurants.find({name : {$regex: "Reg"  , $options: "i"  } },{ restaurant_id:1, name: 1, cuisine:1, borough:1 } )',
	'db.restaurants.find({cuisine:{$in: [/American/,\'Chinese\'] }, borough: "Bronx" },{ name: 1, cuisine: 1,borough:1 })',
	'db.restaurants.find({borough:{$in: [\'Staten Island\', \'Queens\', \'Bronx\', \'Brooklyn\'] }},{ restaurant_id:1,name: 1, cuisine: 1,borough:1 })',
	'db.restaurants.find({borough:{$nin: [\'Staten Island\', \'Queens\', \'Bronx\', \'Brooklyn\'] }},{ restaurant_id:1,name: 1, cuisine: 1,borough:1 })',
	'db.restaurants.find({"grades.score": {$lt:10}},{name:1,"grades.score":1,"grades.date":1})',
	'db.restaurants.find({cuisine: { $nin: ["American", "Chinese"] },name: { $regex: "^Wil", $options: "i" },name: { $regex: "fish", $options: "i" }}, { restaurant_id: 1, name: 1, cuisine: 1, borough: 1 });',
	'db.restaurants.aggregate([{$match: {"grades": {$elemMatch: {grade: \'A\',score: 11,date: ISODate("2014-08-11T00:00:00Z")}}}},{$project: { _id: 1,name: 1,grades: {$filter: {input: "$grades",as: "grade",cond: {$and: [{ $eq: ["$$grade.grade", \'A\'] },{ $eq: ["$$grade.score", 11] },{ $eq: ["$$grade.date", ISODate("2014-08-11T00:00:00Z")] }]}}}}}]);',
	'db.restaurants.find({"grades.1.grade": \'A\',"grades.1.score": 9,"grades.1.date": ISODate("2014-08-11T00:00:00Z")}, { _id: 1, name: 1, grades: { $slice: [1, 1] } })',
	'db.restaurants.find( {$and : [ {"address.coord.1":{$gt:42}},{"address.coord.1":{$lt:53}} ]}, { _id: 1, name: 1, "address.coord": 1})',
	'db.restaurants.find().sort({name: -1})',
	'db.restaurants.find().sort({name: 1})',
	'db.restaurants.find({},{name:1,cuisine:1}).sort({name: -1},{cuisine: 1})',
	'db.restaurants.find({"address.street" : { $exists: false } },{address:1})',
	'db.restaurants.find( {"address.coord": {$type:"double" }}, { _id: 1, name: 1, "address.coord": 1})',
	'db.restaurants.aggregate([{$unwind: "$grades"},{$match: {"grades.score": { $mod: [7, 0] } }},{ $project: { restaurant_id: 1, name: 1, grade: "$grades.grade" }}]);',
	'db.restaurants.find({name : /mon/ },{name:1, borough:1, "address.coord": 1, cuisine: 1})',
	'db.restaurants.find({name : {$regex: "^Mad"} },{name:1, borough:1, "address.coord": 1, cuisine: 1})'];